#-- base settings --#
set -g default-terminal "screen-256color"
set -g display-time 3000
set -g escape-time 0
set -g history-limit 65535
setw -g mode-keys vi

# 0 is too far form `
set -g base-index 1
setw -g pane-base-index 1

# Automatically set window title
setw -g automatic-rename on
set -g set-titles on
set -g set-titles-string '#H:#S.#I.#P #W #T' # window number,program name,active (or not)
set -g visual-bell on

#-- bindkeys --#
# ` is an interesting key for a prefix
set-option -g prefix `
#set -g prefix ^a
unbind ^b
#shell下的Ctrl+a切换到行首在此配置下失效，此处设置之后Ctrl+a再按a即可切换至shell行首
bind-key ` send-prefix
#bind a send-prefix

# we might need ` at some point, allow switching
# we can also send the prefix char with `-a
bind-key F11 set-option -g prefix C-a
bind-key F12 set-option -g prefix ``

# key bindings for horizontal and vertical panes
unbind '"'
bind s splitw -v # vertical split (prefix s)
unbind %
bind v splitw -h # horizontal split (prefix v)

# select pane
bind k selectp -U # above (prefix k)
bind j selectp -D # below (prefix j)
bind h selectp -L # left (prefix h)
bind l selectp -R # right (prefix l)

# resize pane
bind -r ^k resizep -U 5 # upward (prefix Ctrl+k)
bind -r ^j resizep -D 5 # downward (prefix Ctrl+j)
bind -r ^h resizep -L 5 # to the left (prefix Ctrl+h)
bind -r ^l resizep -R 5 # to the right (prefix Ctrl+l)
bind -r M-k resizep -U  # upward (prefix Alt+k)
bind -r M-j resizep -D  # downward (prefix Alt+j)
bind -r M-h resizep -L  # to the left (prefix Alt+h)
bind -r M-l resizep -R  # to the right (prefix Alt+l)

# Use Alt-vim keys without prefix key to switch panes
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# swap pane
bind ^u swapp -U # swap with the previous pane (prefix Ctrl+u)
bind ^d swapp -D # swap with the next pane (prefix Ctrl+d)

# Shift arrow to switch windows
bind -n S-Left previous-window
bind -n S-Right next-window

# misc
bind e lastp  # select the last pane (prefix e)
bind ^e last  # select the last window (prefix Ctrl+e)
bind q killp  # kill pane (prefix q)
bind ^q killw # kill window (prefix Ctrl+q)
bind T swap-window -t 1 # make the current window the first window

# copy mode
bind Escape copy-mode             # enter copy mode (prefix Escape)
bind ^p pasteb                    # paste buffer (prefix Ctrl+p)
bind -t vi-copy v begin-selection # select (v)
bind -t vi-copy y copy-selection  # copy (y)
#bind -t vi-copy y copy-selection "reattach-to-user-namespace pbcopy"  # copy (y)
#bind y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '
#bind C-y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '

#provide access to the clipboard for pbpaste, pbcopy
#set -g default-command "reattach-to-user-namespace -l zsh"

# update default binding of 'Enter' to also use copy-pipe
#unbind -t vi-copy Enter
#bind -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

##CLIPBOARD selection integration
##Requires prefix key before the command key
#Copy tmux paste buffer to CLIPBOARD
bind C-c run "tmux show-buffer | xclip -i -selection clipboard"
#Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer
bind C-v run "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"

# app
bind ! splitw htop                                     # htop (prefix !)
bind m command-prompt "splitw 'exec man %%'"           # man (prefix m)
#bind @ command-prompt "splitw 'exec perldoc -t -f %%'" # perl func (prefix @)
#bind * command-prompt "splitw 'exec perldoc -t -v %%'" # perl var (prefix *)
#bind % command-prompt "splitw 'exec perldoc -t %%'"    # perl doc (prefix %)
#bind / command-prompt "splitw 'exec ri %%'"            # ruby doc (prefix /)

# reload config (prefix r)
bind r source ~/.tmux.conf \; display "Configuration reloaded!"

# use UTF8
set -g utf8 on
setw -g utf8 on
set -g status-utf8 on

#-- statusbar --#
set -g status on
set -g status-interval 3
set -g status-keys vi

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# statusbar content
set -g status-justify centre
set -g status-left "#[default]» #[fg=colour187]#S #[default]• #[fg=colour187]w#I.p#P#[default]"
set -g status-left-length 20
set -g status-right '#[fg=colour174,bg=default,bright]#(tmux-mem-cpu-load 1) #[default]• #[fg=colour187]%l:%M %p#[default] #[fg=colour166]%Y-%m-%d'
set -g status-right-length 90
#set -g status-left "#[bg=green,fg=white,bold]#(ifconfig | grep -A1 eth0 | tail -1 | awk '{print $2}' | awk -F: '{print $2}') #[default]» #[fg=colour187]#S #[default]• #[fg=colour187]w#I.p#P#[default]"
#[fg=colour174]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") 
#[fg=colour174,bg=default,bright]#(tmux-mem-cpu-load 1)  
#[fg=colour174]#(cut -d " " -f 1-3 /proc/loadavg)

#-- colorscheme --#
# see also: https://github.com/daethorian/conf-tmux/blob/master/colors/zenburn.conf

# modes
setw -g clock-mode-colour colour223
setw -g mode-attr bold
setw -g mode-fg colour223
setw -g mode-bg colour235

# panes
#set -g pane-border-bg colour234
set -g pane-border-fg colour235
#set -g pane-active-border-bg colour232
set -g pane-active-border-fg colour240

# statusbar
set -g status-bg colour235
set -g status-fg yellow
set -g status-attr dim
set -g status-left-attr bright
set -g status-right-attr bright

setw -g window-status-current-fg brightred
setw -g window-status-current-bg colour236
setw -g window-status-current-attr bold
setw -g window-status-current-format "#I:#W#F"

setw -g window-status-fg brightblue
setw -g window-status-bg colour236
setw -g window-status-attr dim

#setw -g window-status-alert-attr bold
#setw -g window-status-alert-fg colour255
#setw -g window-status-alert-bg colour160

# messages
set -g message-attr bold
set -g message-fg brightred
set -g message-bg black

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# explicitly disable mouse control
setw -g mode-mouse off
set -g mouse-select-pane off
set -g mouse-resize-pane off
set -g mouse-select-window off
